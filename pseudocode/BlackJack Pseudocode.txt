BlackJack Pseudocode1) Define required constants:   1.1 Define 2 players Ð player and dealer.   1.2 Define 4 possible PLAYER winning combinations and tie.* Player total = 21 (playerBlackjack)* Player total < 21 and player total > dealer total (playerMore), and * Dealer total > 21(dealerBust). * Player and dealer total is ===2) Define required variables used to track the state of the game:      Note: 1.3 Use array for buyMore option [500]2.1 Use array to represent 52 cards to randomly choose from. 2.2 Use a turn variable to remember whose turn it is.2.3 Use a winner variable to represent four different possibilities - player won, dealer won, a tie, or game in play. 2.4 Define array of current bet2.5 Use variable to track player winnings.3) Store elements on the page that will be accessed in code more than once in variables to make code more concise, readable and performant:3.1 Store the 52 elements that represent the cards in a deck.3.2 Store element that represent message to hit, stand or deal (play again).3.3 Store elements that represent buttons (New Game, Rules, Deal, Hit, Stand, Buy Chips)4) Upon loading the app should:	4.1 Initialize the state variables:4.1.1 Initialize the board array to 9 nulls to represent empty squares. The 9 elements will "map" to each square, where index 0 maps to the top-left square and index 8 maps to the bottom-right square.		4.1.2 Initialize whose turn it is to 1 (player). Dealer will be represented by -1.		4.1.3 Initialize winner to null to represent that there is no winner or tie yet. Winner will hold the player value (1 or -1) if there's a winner. Winner will hold a 'T' if there's a tie. 	4.2 Render those state variables to the page:		4.2.1) Render the card deck face 			4.2.2 Render a message: Place Your Bet			4.2.2.1 If winner has a value other than null (game still in progress), render player turn Ð hit or stand?			4.2.2.2) If winner is equal to 'T' (tie), render a tie message.			4.2.2.3 Otherwise, render a congratulatory message to which player has won 	4.3 Wait for player to click button to place bet4.4 Wait for player to click button to deal5) Handle player clicking a button:	5.1) Obtain the index of the button that was clicked by either:		5.1.1) "Extracting" the index from an id assigned to the element in the HTML, or		5.1.2) Looping through the cached square elements using a for loop and breaking out when the current square element equals the event object's target.	5.2) If the board has a value at the index, immediately return because that square is already taken.5.3) If winner is not null, immediately return because the game is over.	5.4) Update the board array at the index with the value of turn.	5.5) Flip turns by multiplying turn by -1 (flips a 1 to -1, and vice-versa).	5.6) Set the winner variable if there's a winner:		5.6.1) Loop through the each of the winning combination arrays defined.		5.6.2) Total up the three board positions using the three indexes in the current combo.		5.6.3) Convert the total to an absolute value (convert any negative total to positive).		5.6.4) If the total equals 3, we have a winner! Set winner to the board's value at the index specified by the first index in the combo array. Exit the loop.	5.7) If there's no winner, check if there's a tie:		5.7.1) Set winner to 'T' if there are no more nulls in the board array.	5.8) All state has been updated, so render the state to the page (step 4.2).		6) Handle a player clicking the newGame button:	6.1) Do steps 4.1 (initialize the state variables) and 4.2 (render).